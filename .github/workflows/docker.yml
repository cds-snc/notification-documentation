name: Build, push to AWS ECR, and deploy
on:
  push:
    branches:
      - main

env:
  AWS_REGION: ca-central-1
  DOCKER_ORG: public.ecr.aws/cds-snc
  DOCKER_SLUG: public.ecr.aws/cds-snc/notify-documentation
  OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN_STAGING }}  

permissions:
  id-token: write   # This is required for requesting the OIDC JWT
  contents: read    # This is required for actions/checkout

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Build and push
    steps:
    - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
    - name: Install AWS CLI
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip -q awscliv2.zip
        sudo ./aws/install --update
        aws --version

    - name: Configure credentials to CDS public ECR using OIDC
      uses: aws-actions/configure-aws-credentials@5fd3084fc36e372ff1fff382a39b10d03659f355 # v2.2.0
      with:
        role-to-assume: arn:aws:iam::283582579564:role/notification-documentation-apply
        role-session-name: NotifyDocumentationGitHubActions
        aws-region: "us-east-1"
    - name: Login to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@261a7de32bda11ba01f4d75c4ed6caf3739e54be # v1.5.3
      with:
        registry-type: public

    - name: Build
      run: |
        docker pull $DOCKER_SLUG:latest
        docker build \
          --cache-from $DOCKER_SLUG:latest \
          -t $DOCKER_SLUG:latest \
          -t $DOCKER_SLUG:${GITHUB_SHA::7} \
          -f Dockerfile .
    - name: Publish
      run: |
        docker push $DOCKER_SLUG:latest && docker push $DOCKER_SLUG:${GITHUB_SHA::7}

    - name: Configure credentials to Notify account using OIDC
      uses: aws-actions/configure-aws-credentials@5fd3084fc36e372ff1fff382a39b10d03659f355 # v2.2.0
      with:
        role-to-assume: arn:aws:iam::239043911459:role/notification-documentation-apply
        role-session-name: NotifyDocumentationGitHubActions
        aws-region: "ca-central-1"

    - name: Install OpenVPN
      run: |
        sudo apt update
        sudo apt install -y openvpn openvpn-systemd-resolved

    - name: Install 1Pass CLI
      run: |
        curl -o 1pass.deb https://downloads.1password.com/linux/debian/amd64/stable/1password-cli-amd64-latest.deb
        sudo dpkg -i 1pass.deb

    - name: Setup Terraform tools
      uses: cds-snc/terraform-tools-setup@v1
      env: # In case you want to override default versions
        CONFTEST_VERSION: 0.30.0 
        TERRAFORM_VERSION: 1.9.5
        TERRAGRUNT_VERSION: 0.66.9
        TF_SUMMARIZE_VERSION: 0.2.3                           

    - name: Fetch VPN
      run: |
        curl https://raw.githubusercontent.com/cds-snc/notification-manifests/refs/heads/main/scripts/createVPNConfig.sh | bash -s staging

    - name: Connect to VPN
      uses: "kota65535/github-openvpn-connect-action@cd2ed8a90cc7b060dc4e001143e811b5f7ea0af5"
      with:
        config_file: /var/tmp/staging.ovpn
        echo_config: false
        
    - name: Get Kubernetes configuration
      run: |
        aws eks --region $AWS_REGION update-kubeconfig --name notification-canada-ca-staging-eks-cluster --kubeconfig $HOME/.kube/config

    - name: Update image in staging
      run: |
        kubectl set image deployment.apps/documentation documentation=$DOCKER_SLUG:${GITHUB_SHA::7} -n=notification-canada-ca --kubeconfig=$HOME/.kube/config

    - name: my-app-install token
      id: notify-pr-bot
      uses: getsentry/action-github-app-token@38a3ce582e170ddfe8789f509597c6944f2292a9 # v1.0.6
      with:
        app_id: ${{ secrets.NOTIFY_PR_BOT_APP_ID }}
        private_key: ${{ secrets.NOTIFY_PR_BOT_PRIVATE_KEY }}

    - uses: cds-snc/notification-pr-bot@main
      env:
        TOKEN: ${{ steps.notify-pr-bot.outputs.token }} 

    - name: Generate docker SBOM
      uses: cds-snc/security-tools/.github/actions/generate-sbom@34794baf2af592913bb5b51d8df4f8d0acc49b6f # v3.2.0
      env:
        TRIVY_DB_REPOSITORY: ${{ vars.TRIVY_DB_REPOSITORY }}
      with:
        docker_image: "${{ env.DOCKER_SLUG }}:latest"
        dockerfile_path: "Dockerfile"
        sbom_name: "notification-documentation"
        token: "${{ secrets.GITHUB_TOKEN }}"

    - name: Notify Slack channel if this job failed
      if: ${{ failure() }}
      run: |
        json="{'text':'<!here> CI is failing in <https://github.com/cds-snc/notification-documentation/actions/runs/${GITHUB_RUN_ID}|notification-documentation> !'}"
        curl -X POST -H 'Content-type: application/json' --data "$json"  ${{ secrets.SLACK_NOTIFY_WEBHOOK }}
